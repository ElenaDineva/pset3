#include <stdio.h>
#include <stdlib.h>

#include "bmp.h"

int main(int argc, char *argv[])
{
    // ensure proper usage
    if (argc != 4)
    {
        printf("Usage: n infile outfile\n");
        return 1;
    }

    // get an int to multiply
    int n = atoi(argv[1]);

    //Make sure n is between 0 and 100
    if (n < 0 || n > 100)
    {
        printf("Resize value must be between 0 and 100\n");
        return 1;
    }
    // remember filenames
    char *infile = argv[2];
    char *outfile = argv[3];

    // open input file
    FILE *inptr = fopen(infile, "r");
    if (inptr == NULL)
    {
        printf("Could not open %s.\n", infile);
        return 1;
    }

    // open output file
    FILE *outptr = fopen(outfile, "w");
    if (outptr == NULL)
    {
        fclose(inptr);
        printf("Could not create %s.\n", outfile);
        return 1;
    }

    // read infile's BITMAPFILEHEADER
    BITMAPFILEHEADER bf;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi;
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);

    //old width
    LONG biWidthOld = bi.biWidth;


    //modify bitmapinfoheader for height an width
    bi.biWidth *= n;
    bi.biHeight *= n;

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        printf("Unsupported file format.\n");
        return 1;
    }


    // write outfile's BITMAPFILEHEADER
    fwrite(&bf, sizeof(BITMAPFILEHEADER), 1, outptr);

    // write outfile's BITMAPINFOHEADER
    fwrite(&bi, sizeof(BITMAPINFOHEADER), 1, outptr);

     // determine padding for scanlines
    int padding_old = (4 - (biWidthOld * sizeof(RGBTRIPLE)) % 4) % 4;
    // determine new padding after update header info
    int padding = (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;

    // resize the image size
    bf.bfSize = bi.biSizeImage + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);
    bi.biSizeImage = ((3 * bi.biWidth) + padding) *abs(bi.biHeight);



    // resize horizontally: for each row
    for (int i = 0, biHeight = abs(bi.biHeight); i < biHeight; i++)
    {
        // temporary storage for a triple
        RGBTRIPLE triple;
        // temporary storage for scanline
        RGBTRIPLE scanline[bi.biWidth];
        //array position counter
        int count = 0;
            {

                // for each pixel in a row
                for (int j = 0; j < biWidthOld; j++)
                {

                    // read RGB triple from infile
                    fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

                    // write RGB triple to outfile
                    for (int k = 0; k < n; count++, k++)
                    {
                        scanline[count] = triple;
                    }
                }
                for (int m = 0; m < n; m++)
                {
                    // write array to outfile
                    fwrite(scanline, sizeof(scanline), 1, outptr);
                    // Add padding
                    for (int k = 0; k < padding; k++)
                    {
                        fputc(0x00, outptr);
                    }
                }
        // skip over old padding, if any
        fseek(inptr, padding_old, SEEK_CUR);
            }
    }



    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);

    // success
    return 0;
}
